import path from 'node:path'
import fs from 'node:fs'
import c from 'picocolors'

const cwd = process.cwd()
const yarnLockPath = path.join(cwd, 'yarn.lock')

if (!fs.existsSync(yarnLockPath)) {
  console.error('yarn.lock not found')
  process.exit(1)
}

let yarnLock = fs.readFileSync(yarnLockPath, 'utf-8').replaceAll('\r\n', '\n')

const yarnLockV1Matches = yarnLock.match(/^# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.\n# yarn lockfile v1\n\n\n/)
if (!yarnLockV1Matches) {
  console.error('yarn.lock is not a v1 file')
  process.exit(1)
}
yarnLock = yarnLock.slice(yarnLockV1Matches[0].length).replace(/\n+$/, '')

const packages = yarnLock.split('\n\n')
const pkgMeta = packages.map(pkg => {
  let pkgSpec = pkg.split('\n')[0].split(', ')[0]
  if (pkgSpec.endsWith(':')) pkgSpec = pkgSpec.slice(0, -1)
  if (pkgSpec.startsWith('"') && pkgSpec.endsWith('"')) pkgSpec = pkgSpec.slice(1, -1)
  const atIndex = pkgSpec.lastIndexOf('@')
  const name = pkgSpec.slice(0, atIndex)
  const version = pkgSpec.slice(atIndex + 1)
  return { name, version }
})

let prevPkg = null
const duplicates = new Map()
pkgMeta.forEach(pkg => {
  if (prevPkg && prevPkg.name === pkg.name) {
    const versions = duplicates.get(pkg.name) || []
    if (!versions.includes(prevPkg.version)) {
      versions.push(prevPkg.version)
    }
    versions.push(pkg.version)
    duplicates.set(pkg.name, versions)
  }
  prevPkg = pkg
})

const duplicatesLines = new Map()
const maxLength = []
for (const [name, versions] of duplicates) {
  const nameStr = name
  const versionsStr = versions.join(', ')
  duplicatesLines.set(nameStr, versionsStr)
  maxLength[0] = Math.max(maxLength[0] || 0, nameStr.length)
  maxLength[1] = Math.max(maxLength[1] || 0, versionsStr.length)
}

console.log()
console.log(c.red('â€º') + ' yarn.lock - ' + c.cyan(duplicates.size) + ' duplicates')
console.log()

if (duplicatesLines.size > 0) {
  for (const [nameStr, versionsStr] of duplicatesLines) {
    console.log(`  ${nameStr.padEnd(maxLength[0])}  ${versionsStr.padStart(maxLength[1])}`)
  }
  console.log()
} else {
  console.log('  Great~ No duplicates found!')
  console.log()
}
